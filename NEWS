libvirt releases
================

# v3.10.0 (2017-12-04)

  * New features

    - conf: Support defining distances between virtual NUMA cells
        A NUMA hardware architecture supports the notion of distances between
        NUMA cells. This can now be specified using the <distances> element
        within the NUMA cell configuration. Drivers which support this include
        Xen and QEMU.

    - Xen: Support defining vNUMA topology
        Xen now supports defining a virtual NUMA topology for VMs, including
        specifying distances between NUMA cells.

    - qemu: Add the ability to configure HPT resizing for pSeries guests
        The user can now decide whether HPT (Hash Page Table) resizing should
        be enabled, disabled or required instead of leaving it up to hypervisor
        defaults and negotiation between the guest and the host.

    - qemu: Add vmcoreinfo feature
        Starting with QEMU 2.11, the guest can save kernel debug details when
        this feature is enabled and the kernel supports it. It is useful to
        process kernel dump with KASLR enabled, and also provides various
        kernel details to crash tools.

    - conf: Move the auth and encryption definitions to disk source
        Allow parsing and formatting of the auth and encryption sub-elements to
        be a child of the source element. This will allow adding an auth
        sub-element to a backingStore or mirror elements as a means to track
        specific authentication and/or encryption needs.

  * Improvements

    - vbox: Add VirtualBox 5.2 support

    - vbox: Add support for configuring storage controllers
        The VirtualBox driver now supports the <controller> element in the
        domain XML for configuring storage controllers in VBOX VMs.
        Additionally, libvirt's domain XML schema was updated to allow optional
        model attribute for <controller type='ide'> which is used by the VBOX
        driver to set the IDE controller model to be one of 'piix4', 'piix4'
        (default), or 'ich6'. Finally, with this change dumpxml generates
        <controller> elements that correspond to current VBOX VM storage
        controller configuration.

    - vbox: Add support for attaching empty removable disks
        The VirutalBox driver now supports adding CD-ROM and floppy disk
        devices that do not have the disk source specified. Previously such
        devices were silently ignored.

    - vbox: Add support for attaching SAS storage controllers
        In VirtualBox, SCSI and SAS are distinct controller types whereas
        libvirt does not make such distinction. Therefore, the VBOX driver was
        updated to allow attaching SAS controllers via <controller type='scsi'
        model='lsisas1068'> element. If there are both SCSI and SAS controllers
        present in the VBOX VM, the domain XML can associate the disk device
        using the <address> element with the controller attribute, and
        optionally, set the port via unit attribute.

    - qemu: Generate predictable paths for qemu memory backends
        In some cases management applications need to know paths passed to
        memory-backend-file objects upfront. Libvirt now generates predictable
        paths so applications can prepare the files if they need to do so.

    - Shareable disks work properly with recent qemu
        Recent qemu versions added image locking to avoid potential corruption
        of disk images. This broke shareable disks with libvirt since the
        feature was turned on by default in qemu. Libvirt now enables sharing
        of those disks in qemu so that the image locking is not applied in that
        case. Additionally libvirt now checks that shareable disks have
        supported format (raw) to avoid metadata corruption.

    - Improve serial console behavior on non-x86 architectures
        ppc64, aarch64 and s390x guests were treating the <serial> and
        <console> elements differently from x86, in some cases presenting
        misleading information to the user. The behavior is now consistent
        across all architectures and the information reported is always
        accurate.

  * Bug fixes

    - vbox: Do not ignore failures to attach disk devices when defining
        The define now fails and reports an error if any of the controller or
        disk devices specified in the domain XML fail to attach to the
        VirtualBox VM.

    - vbox: Fix dumpxml to always output disk devices
        The VirtualBox driver was ignoring any disk devices in dumpxml output
        if there was a SAS storage controller attached to the VM.

    - vbox: Fix dumpxml to always generate valid domain XML
        When a VirtualBox VM has multiple disks attached, each to a different
        storage controller that uses 'sd' prefix for block device names e.g.
        one disk attached to SATA and one to SCSI controller, it no longer
        generates XML where both would have 'sda' device name assigned. Instead
        it properly assigns 'sda' and 'sdb' to those disks in the order of
        appearance.

    - Securely pass iSCSI authentication data
        Rather than supplying the authentication data as part of the iSCSI URL
        for a disk or host device, utilize the encrypted secret object to
        securely pass the authentication data.

# v3.9.0 (2017-11-02)

  * New features

    - Add capability to allow hot (un)plug of a domain watchdog device

    - Allow users to set device aliases
        Users can set aliases to domain devices and thus identify them easily.

    - qemu: Support multiqueue for virtio-blk
        Multiqueue support for virtio-blk has been available in QEMU ever since
        2.7.0, and now libvirt guests can enable it.

    - Add virDomainSetLifecycleAction API
        Provided a new API to allow dynamic guest lifecycle control for guest
        reactions to poweroff, restart, or crash type events related to the
        domain XML on_poweroff, on_reboot, and on_crash elements. The virsh
        set-lifecycle-action command was created to control the actions.

    - qemu: Allow cold(un)plugging and hot(un)plugging input devices

    - net: Implement QoS for vhostuser

  * Improvements

    - Allow a logical volume to be create using LUKS
        A logical volume may be created using an encryption element using
        "luks" format. This does require a previously created secret to store
        the passphrase used to encrypt the volume Adding the volume to a domain
        can then either provide the secret or allow the consumer in the guest
        to provide the passphrase in order to decrypt the volume.

    - net: Ignore auto-generated MAC address when detaching an interface
        If the MAC address has not been specified by the user, libvirt will try
        and fill in the gaps by generating one; however, for some error paths
        that led to some confusing error messages, so when an auto-generated
        MAC address is specified the error message will not include the
        auto-generated MAC.

    - net: Enable MAC address lookup for virDomainInterfaceStats

    - apparmor: Several improvements
        Changes include permitting access to data about USB devices and dnsmasq
        instances, allowing spaces in guest names and many more.

    - cpu: Use CPU information obtained from QEMU when possible
        Recent QEMU versions can expose information about which CPU models are
        available and usable on the host; libvirt will now make use of such
        information whenever possible.

    - hyperv: Various improvements
        The error reported when clients can't connect to Hyper-V has been made
        more descriptive, and memory limits for guests are now mapped to more
        appropriate libvirt equivalents.

    - qemu: Report QEMU error on failed migration
        Instead of reporting a generic error, ask QEMU for a more detailed and
        thus hopefully more helpful one.

    - vbox: Implement autoport for RDP
        libvirt will now obtain the (dynamically allocated) RDP port number
        from VirtualBox itself, avoiding conflicts between multiple guests
        wanting to use RDP at the same time.

    - qemu: Allow rotation of small logs
        On a host where numerous unique instances are executed per day, it's
        quite possible that, even though each of the single log files are
        fairly small, collectively the quantity and volume may add tens of
        thousands of log files to the /var/log/libvirt/qemu/ directory.
        Removing the constraints that log have to be bigger than 100 KiB before
        they can be rotated solves the issue.

  * Bug fixes

    - Fix swapped interface statistics and QoS
        Due to internal implementation, reported statistics for some types of
        interfaces were swapped (RX appeared in TX and vice versa). Similarly,
        QoS was set in reversed way.

    - Properly resize local LUKS encrypted volume
        Resizing of a local LUKS encrypted volume will now use qemu-img to
        resize the volume. This will require configuring a secret for the LUKS
        encrypted volume.

    - qemu: Reserve PCI addresses for implicit i440fx devices
        Failing to do so causes the addresses to be considered usable by
        libvirt, which means they could be assigned to more than one device
        resulting in the guest failing to start.

    - spec: Restart libvirtd only at the end of the upgrade process
        Use %posttrans to make sure libvirtd is not restarted before all other
        components, such as the library itself and storage / hypervisor
        drivers, have already been upgraded.

  * Security

    - qemu: Ensure TLS clients always verify the server certificate
        While it's reasonable to turn off client certificate validation, as
        setting it up can be non-trivial, clients should always verify the
        server certificate to avoid MITM attacks. However, libvirt was using
        the same knob to control both checks, leading to CVE-2017-1000256 /
        LSN-2017-0002.

# v3.8.0 (2017-10-04)

  * New features

    - qemu: Added support for cold-(un)plug of watchdog devices

    - qemu: Added support for setting IP address os usernet interfaces

    - qemu: Added support for Veritas Hyperscale (VxHS) block devices

    - storage: Added new events for pool-build and pool-delete

  * Improvements

    - qemu: Set DAC permissions properly for spice rendernode
        When a rendernode path is set for SPICE GL on qemu:///system, we now
        correctly set DAC permissions on the device at VM startup. This is the
        last remaining hurdle to let SPICE GL work for qemu:///system without
        any external host changes.

    - nodedev: Add switchdev offload query to NIC capabilities
        Allow querying the NIC interface capabilities for the availability of
        switchdev offloading (also known as kernel-forward-plane-offload).

    - New CPU models for AMD and Intel
        AMD EPYC and Intel Skylake-Server CPU models were added together with
        their features

    - Improve long waiting when saving a domain
        While waiting for a write to disk to be finished, e.g. during save,
        even simple operations like virsh list would be blocking due to domain
        lock. This is now resolved by unlocking the domain in places where it
        is not needed.

  * Bug fixes

    - Proper units are now used in virsh manpage for dom(mem)stats
        Previously the documentation used multiples of 1000, but now it is
        fixed to use multiples of 1024.

    - qemu: Fix error reporting when disk attachment fails
        There was a possibility for the actual error to be overridden or
        cleared during the rollback.

    - qemu: Fix assignment of graphics ports after daemon restart
        This could be seen with newer kernels that have bug regarding
        SO_REUSEADDR. After libvirtd was restarted it could assign already used
        address to new guests which would make them fail to start. This is
        fixed by marking used ports unavailable when reconnecting to running
        QEMU domains.

    - Fix message decoding which was causing a very strange bug
        When parsing an RPC message with file descriptors was interrupted and
        had to restart, the offset of the payload was calculated badly causing
        strange issues like not being able to find a domain that was not
        requested.

# v3.7.0 (2017-09-04)

  * New features

    - qemu: Add managedsave-edit commands
        Using managedsave-dumpxml, managedsave-define and managedsave-edit
        commands, now we can dump and edit the XML configuration of domain
        which has managedsave image.

    - qemu: Add migrate-getmaxdowntime command
        Currently, the maximum tolerable downtime for a domain being migrated
        is write-only from libvirt, via migrate-setmaxdowntime. This implements
        a complementary migrate-getmaxdowntime command

    - bhyve: Support autoport for VNC ports
        It's no longer necessary to explicitly specify VNC port for the bhyve
        guests. With the autoport feature it will be allocated automatically.
        Please refer to the bhyve driver documentation for examples.

    - qemu: Added support for setting heads of virtio GPU

    - qemu: Added support to configure reconnect timeout for chardev devices
        When you have a TCP or UNIX chardev device and it's connected somewhere
        you can configure reconnect timeout if the connection is closed.

  * Improvements

    - qemu: Report a clear error when dropping a VM during startup
        "Failed to load config for domain 'DOMNAME'" is now reported if a VM
        config can't be parsed for some reason, and thus provides a clear
        indication for users (and devs).

    - apparmor: Update for QEMU 2.10 compatibility
        Starting with QEMU 2.10, disk images and NVRAM files get automatically
        locked to prevent them from being corrupted; however, file locking
        needs to be explicitly allowed through virt-aa-helper or AppArmor will
        reject the requests and the guest will not be able to run.

    - virsh: List Unix sockets in 'domdisplay' output
        VNC and SPICE graphics can use Unix sockets instead of TCP/IP sockets
        as connection endpoints, but such a configuration was not handled
        correctly by virsh domdisplay, causing the respective endpoints to be
        missing from the output.

    - qemu: Don't check whether offline migration is safe
        Since offline migration only copies the guest definition to the
        destination host, data corruption is not a concern and the operation
        can always be performed safely.

    - virt-host-validate: Fix IOMMU detection on ppc64

  * Bug fixes

    - qemu: Better support for international domain names (with wide
      characters)
        There were some issues with multi-byte domains getting lost on daemon
        restart due to truncation, so the code now handles multi-byte names a
        bit better.

    - qemu: Support long domain names with namespaces
        Domains with extremely long names would fail to start due to temporary
        namespace paths being created with the whole name. The path is now
        generated with shortened name instead.

    - qemu: Tolerate missing emulator binary during libvirtd restart
        For some time libvirt required qemu capabilities being present when
        parsing VM configs during startup. As a side effect VM configs would
        fail to parse and thus vanish, if the emulator binary would be
        uninstalled or broken. Libvirt now tolerates when capabilities are
        missing during startup.

    - qemu: Prevent pSeries guests from disappearing in some situations
        pSeries guest would disappear if any of the host devices they were
        configured to use was not available during libvirtd startup, which
        could easily happen for SR-IOV Virtual Functions. This scenario is now
        handled correctly.

    - qemu: Honor <on_reboot/> setting
        The setting was accepted by the parser, but not actually implemented.

    - Fix --verbose option for all daemons
        Since v3.0.0, the option had been ignored by all libvirt daemons
        (libvirtd, virtlogd and virtlockd); it's now working as intended once
        again.

# v3.6.0 (2017-08-02)

  * New features

    - hyperv: Implement virDomainSetMemory and virDomainSendKey APIs

    - qemu: Support multiple PHBs for pSeries guests
        pSeries guests can now have multiple PHBs (PCI Host Bridges), which
        show up as separate PCI domains in the guest. To create additional
        PHBs, simply add PCI controllers with model pci-root to the guest
        configuration.

    - qemu: Isolate hostdevs on pSeries guests
        To enable better error reporting and recovery, unrelated hostdevs will
        now be automatically isolated on pSeries guests by placing them on
        separate PHBs (PCI Host Bridges).

  * Improvements

    - qemu: platform serial devices can now use chardev features
        QEMU VMs that depend on platform serial devices can now use QEMU's
        -chardev option, which enables access to advanced features like log
        file configuration. This applies to the default serial devices for arm,
        aarch64, and some ppc configurations.

    - Require use of GCC 4.4 or Clang compilers
        We only ever test libvirt with GCC or Clang (which provides a GCC
        compatible compilation environment). Between them, these compilers
        cover every supported operating system platform, including Windows.

    - qemu: shared disks with directsync cache should be safe for migration
        At present shared disks can be migrated with either readonly or
        cache=none. But cache=directsync should be safe for migration, because
        both cache=directsync and cache=none don't use the host page cache, and
        cache=direct write through qemu block layer cache.

    - Handle hotplug change on VLAN configuration using OVS
        Libvirt was taught to handle VLAN change for running OVS interface.

  * Bug fixes

    - qemu: Use vCPU 'node-id' property and pass it back to qemu
        vCPU properties gathered from query-hotpluggable-cpus need to be passed
        back to QEMU. As QEMU did not use the node-id property until now and
        libvirt forgot to pass it back properly (it was parsed but not passed
        around) we did not honor this.

    - Miscellaneous stream fixes
        After introducing sparse stream features there were still some known
        bugs left. Those are fixed in this release.

    - qemu: Miscellaneous domain NS fixes
        Libvirt starts qemu domains in separate Linux namespaces for a while
        now. However, there were still some bugs lingering. For instance
        libvirt did not know how to handle file based bind mounts.

    - Various CPU driver improvements
        There were some minor bugs when using 'host-model' CPU.

# v3.5.0 (2017-07-04)

  * New features

    - qemu: Add support for loadparm for a boot device
        Add an optional boot parameter 'loadparm' for a boot device. Loadparm
        is an 8 byte parameter that, when present, is queried by S390 guests
        via sclp or diag 308. Linux guests on S390 use it to select a boot
        entry.

    - Support controlling how video devices are exposed to the bhyve guests
        The vgaconf attribute was added to video's driver element. Possible
        values are: on, off, and io. It controlls the way how bhyve exposes
        video devices to its guests; various guest OSes might require different
        settings to boot properly.

    - qemu: Add support for live updates of coalesce settings
        Users can now use virsh update-device to change the coalesce settings
        of an interfaces while the domain is running.

    - qemu: Allow VirtIO devices to use vIOMMU
        It is now possible to turn on IOTBL for the vIOMMU and have VirtIO
        devices use it, provided they have been configured appropriately.

  * Improvements

    - qemu: block copy job can be used with persistent domains
        Until now it was not possible to use block copy with persistent VMs. In
        use cases where it's not required to recover the job after VM shutdown,
        it's possible to specify VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB flag to
        start the copy job.

    - JSON pseudo-protocol backing store parser supports new format of qemu 2.9
        QEMU 2.9 modified a few structures corresponding to the JSON format of
        specifying a backing store for a disk image. Libvirt now implements the
        new format.

    - Capabilities now include info about host's CAT settings
        Various information about resource control from the host is gathered
        and presented in capabilities if available.

    - apparmor: Several improvements
        Allow access to Ceph config, EFI firmware on both x86_64 and aarch64,
        device tree on ppc64 and more.

    - qemu: Support host-model on POWER9 machines

  * Bug fixes

    - qemu: snapshot: retrieve image metadata from user provided files
        Disk images of an external snapshot created with
        VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT flag specified would not be
        scanned for metadata after recent changes. The metadata is necessary to
        allow keeping relative paths between images when doing a block-commit.

    - Parse decimal numbers in a locale-independent way
        Some locales, such as de_DE and pt_BR, use comma rather than dot to
        separate the integer part from the fractional part of a decimal number;
        however, several data sources such as the kernel use a
        locale-independent representation and need to be treated accordingly.

    - Support compilation with newer compiler and libc versions
        Several fixes have been included to make compilation with Clang 4.0.0,
        GCC 7.1 and glibc >= 2.25.90 possible.

    - qemu: Query name for vhost-user interfaces at runtime
        This makes it possible to use virsh subcommands such as domiflist and
        domifstat on vhost-user interfaces.

    - qemu: Set MTU for hotplugged interfaces correctly
        When hotplugging a network interface, the MTU was only set on the guest
        side. Set it on the host side as well.

    - qemu: Forbid updating MTU for interfaces of running guests
        The MTU setting can't be modified while the guest is running, so any
        attempt to alter it at runtime will now result in an error rather than
        being silently ignored.

    - qemu: Fix specifying QXL heads with older QEMU releases
        Specifying the number of QXL heads was not working correctly for QEMU
        releases older than 1.6.

    - qemu: Fix migration to older libvirt/QEMU versions
        When the guest is started, libvirt updates the CPU definition to
        reflect the actual CPU features to enforce ABI. We need to send
        original and updated CPU definition in order to support migration to
        older libvirt/QEMU versions. Only the updated CPU definition was sent
        to destination.

# v3.4.0 (2017-06-02)

  * New features

    - Improved streams to efficiently transfer sparseness
        New extension to virStream was implemented so that
        virStorageVolDownload and virStorageVolUpload can preserve file
        sparseness.

    - I/O APIC type can be specified for QEMU/KVM domains
        The ioapic tag was added to domain features, so the type of the I/O
        APIC can now be specified (e.g. putting it in userspace for KVM
        domains).

    - The reason for VM shutdown is reported, if known
        QEMU 2.10 will be able to report the reason for shutting down (whether
        that was caused by the guest or not), and libvirt is prepared for that
        and reports that information in its shutdown event as well, if it is
        known.

  * Improvements

    - Repository now has new README.md file
        The new file uses markdown syntax, so it looks better on github and
        possibly other web pages, but it has also more useful information. The
        old README is now symlink to the new file.

    - qemu: Use GICv2 by default for aarch64/virt TCG guests
        The emulated GICv3 has some limitations that make it unusable as a
        default; use GICv2 until they're sorted out. This change makes it once
        again possible to run aarch64/virt guests on a x86_64 host without
        having to tweak their configuration.

    - Additional capabilities for the node_device module
        Introduce two new capabilities to the node_device module. The first is
        for CCW devices, most common on the S390 architecture. The second is
        for fibre channel-backed SCSI devices and exposes the fc_remote_port
        sub-capability to SCSI target devices.

    - Node devices now report Mediated device capabilities
        Endpoint devices support new mdev capability and their parents now
        report the supported types in new mdev_types capability.

    - Capabilities now report information about host caches
        If supported in the kernel, host capabilities will now list L3 caches.
        The code for other levels was added as well, but only L3 caches are
        reported currently.

    - POWER9 CPU model was added
        It is now properly reported in host capabilities.

    - libxl: NUMA sibling distances are now reported in host capabilities

    - VMDK version 3 files are now properly detected

    - Interrupt remapping and Extended interrupt mode for IOMMU devices
        These two new features can now be controlled with new <driver
        intremap='on/off' eim='on/off'/> tag for iommu devices.

    - Graphics in libxl domains now have default addresses
        Even though there were default addresses before this change, they were
        not saved in the XML. It is now possible to see and control the listen
        addresses properly.

    - Default USB controllers are now added for devices in libxl domains
        Even though they were added automatically when USB device was attached,
        they could've been missing in some other cases. The logic is now fixed
        so there are always USB controllers, even if there was none of them in
        the specified XML.

    - Limits for RPC messages were increased
        Hitting the RPC limits we have is easier every day, so they were
        increased once again and some guessing logic was improved as well. It
        is now possible to get more stats than ever using the
        virConnectGetAllDomainStats() call and push through even bigger
        requests and replies for all APIs.

  * Bug fixes

    - qemu: Create memory_backing_dir on startup
        Libvirt's policy is that directories are created on startup if they
        don't exist. We've missed this one.

    - PCIe 4.0 cards now report proper link speeds
        It could happen that the link speed for PCIe devices was not properly
        reported or the nodedev-dumpxml just failed. That was due to mistake in
        the field width, but should now work properly.

    - qemu: Do not report errors on shutdown
        For some users, in some rare cases, it could happen that there was an
        error message "internal error: End of file from qemu monitor" in the
        logs even though no problem happened. The detection of these false
        positives was improved and such errors should not show any more.

    - User-specified UNIX socket paths for virtio channels should not be reset
        It could happen, in some cases, that libvirt would mistake a
        user-specified path for its own generated one and thus remove it from
        the XML. The detection of such addresses was improved now.

    - Fix address reservation during RNG hot-plug
        When error occurred in a specific point in time during the hot-plug of
        an RNG device, it could happen that an address was released even though
        another device was already using it, making it possible to hot-plug
        another device with that address, effectively having duplicated
        addresses in the XML.

# v3.3.0 (2017-05-05)

  * New features

    - net: Add support for coalesce settings
        Enabling data batching through these settings can improve network
        performance for guests.

    - qemu: Add support for guest CPU cache specification
        This features allows fine-grained control of the cache behavior of the
        guest CPU.

    - qemu: Add support for the qemu-xhci USB controller

  * Improvements

    - hyperv: Support Hyper-V 2012 and newer
        Starting with Hyper-V 2012 the API has changed causing the existing
        driver to be unable to send and process requests properly. This has
        been resolved by adding abstractions to handle the differences and ease
        handling such breaks if they happen in the future.

    - libxl: Add support for nested HVM domains
        Xen has supported nested HVM domains since version 4.4. The libvirt
        libxl driver now supports nested HVM domains by specifying the
        host-passthrough CPU mode when defining a domain.

    - qemu: Implement ACPI support for aarch64 guests
        Up until this point, ACPI support was only advertised for x86_64 guests
        and disabling it for aarch64 guests was not possible at all.

    - vz: Add support for changing the number of vCPUs

    - qemu: Automatically choose the best USB controller for guests
        The recently introduced qemu-xhci USB controller is the best choice for
        both ppc64 and aarch64 guests, so use it by default on those
        architectures if available.

    - daemon: Increase default task limit for libvirtd
        The default number of tasks for the pids cgroup controller is 512,
        which libvirtd can quickly bump into when starting lots of guests.
        Raise the limit to a more reasonable 32768.

    - docs: Include man pages describing key code names and values

    - virsh: Report initialization errors
        Sometimes virsh might be unable to start: when that happens, report
        useful diagnostics instead of failing silently.

  * Bug fixes

    - nss: Don't require a network restart for libvirt_guest
        Previously, the libvirt_guest NSS module would only work properly after
        the corresponding network had been restarted; now newly started guests
        will be reported correctly right away.

    - storage: Remove unavailable transient pools after restart
        Solve an issue where transient storage pools would be stuck in an
        unmanageable state if the source disappeared and libvirtd was
        subsequently restarted.

    - storage: Fix capacity value for LUKS encrypted volumes
        The 'capacity' value (e.g. guest logical size) for a LUKS volume is
        smaller than the 'physical' value of the file in the file system, so we
        need to account for that.

    - qemu: Fix regression when hyperv/vendor_id feature is used
        Guests using the feature would not be started at all; it is now
        possible to start them as expected.

    - qemu: Do not crash on USB address with no port and invalid bus

    - crypto: Always pad data before encrypting it
        If this step is not performed, when the data length matches the chunk
        size the decryption routines will misinterpret the last byte of data as
        the padding length and fail to decode it correctly.

# v3.2.0 (2017-04-02)

  * New features

    - The virt-host-validate tool now supports bhyve hypervisor

    - Introduce NVDIMM memory model
        NVDIMM is new type of memory introduced into QEMU 2.6. The idea is that
        we have a non-volatile memory module that keeps the data persistent
        across domain reboots and offers much faster data accesses. However,
        due to a bug in QEMU, this feature is not enabled for QEMUs older than
        2.9.0.

    - qemu: Introduce support for generic PCIe Root Ports
        For new controllers, a generic device (pcie-root-port) will be used by
        default instead of the Intel-specific device (ioh3420), provided the
        QEMU binary supports it.

    - qemu: Add support for checking guest CPU ABI compatibility
        When migrating a domain to a different host, restoring a domain from a
        file or reverting a snapshot libvirt will make sure the guest CPU QEMU
        presents to the guest OS exactly matches the one provided on the source
        host (or before the domain's state was saved). This enhanced check may
        also be requested when starting a new domain to ensure the virtual CPU
        exactly matches the one specified in the XML.

    - qemu: Add support to migrate using TLS
        Add the ability to migrate QEMU guests using TLS via a new flag
        VIR_MIGRATE_TLS or virsh migrate '--tls' option. Requires using at
        least QEMU 2.9.0 in order to work properly.

    - qemu: add mediated devices framework support
        Recent kernel version introduced new mediated device framework, so
        provide an initial support of this framework for libvirt, mainly by
        introducing a new host device type in the XML.

    - qemu: Add support for setting TSC frequency
        Setting TSC frequency is required to enable migration for domains with
        'invtsc' CPU feature turned on.

    - Add support for block device threshold event
        When using thin provisioning, management tools need to resize the disk
        in certain cases. To avoid having them to poll disk usage this version
        introduces an event which will be fired when a given offset of the
        storage is written by the hypervisor. Together with the API it allows
        registering thresholds for given storage backing volumes and this event
        will then notify management if the threshold is exceeded. Currently
        only the qemu driver supports this.

    - bhyve: Add support for UEFI boot ROM, VNC, and USB tablet
        The bhyve driver now supports booting using the UEFI boot ROM, so
        non-FreeBSD guests that support UEFI could be booted without using an
        external boot loader like grub-bhyve. Video is also supported now,
        allowing to connect to guests via VNC and use an USB tablet as an input
        device. Please refer to the driver page for domain XML examples.

  * Improvements

    - qemu: Detect host CPU model by asking QEMU on x86_64
        Previously, libvirt detected the host CPU model using CPUID
        instruction, which caused libvirt to detect a lot of CPU features that
        are not supported by QEMU/KVM. Asking QEMU makes sure we don't start it
        with unsupported features.

    - perf: Add more perf statistics
        Add support to get the count of cpu clock time, task clock time, page
        faults, context switches, cpu migrations, minor page faults, major page
        faults, alignment faults, emulation faults by applications running on
        the platform.

    - Write hyperv crash information into vm log
        qemu's implementation of the hyperv panic notifier now reports
        information about the crash from the guest os. Starting with this
        version, libvirt logs the information to the vm log file for possible
        debugging.

  * Bug fixes

    - QEMU: Use adaptive timeout for connecting to monitor
        When starting qemu, libvirt waits for qemu to create the monitor socket
        which libvirt connects to. Historically, there was sharp 30 second
        timeout after which the qemu process was killed. This approach is
        suboptimal as in some scenarios with huge amounts of guest RAM it can
        take a minute or more for kernel to allocate and zero out pages for
        qemu. The timeout is now flexible and computed by libvirt at domain
        startup.

    - Overwrite (clear) 2 KB instead of just 512 bytes when initializing
      logical device

    - Describe the logical backend requirements better for pool-create-as

# v3.1.0 (2017-03-03)

  * New features

    - storage: Add Virtuozzo storage backend storage pool
        Add new storage backend to support pool and volume management within
        the Virtuozzo Storage environment. Virtuozzo Storage is a highly
        available distributed software defined storage with built-in
        replication and disaster recovery.

    - qemu: Add support for memory backing with file source
        Add support in numa topology for file source inside memory backing
        (hugepages are not needed) Three new elements <source/>,<access/> and
        <allocation/> were added to <memoryBacking/> element. Also new
        configuration parameter memory_backing_dir was added to qemu.conf.

    - network: make openvswitch call timeout configurable
        Adding the ability to specify the timeout value in seconds for
        openvswitch calls in the libvirtd configuration file.

    - bhyve: add e1000 NIC support
        Add support for e1000 NIC. Previously, the only available option was
        virtio-net.

    - libxl: add tunneled migration support
        Add tunneled migration to libxl driver, which is always capable of
        strong encryption and doesn't require any extra network connection
        other than what's required for remote access of libvirtd.

    - qemu: add rendernode argument
        Add a new attribute 'rendernode' to <gl> spice element.

    - nodedev: add drm capability
        Add a new 'drm' capability for Direct Rendering Manager (DRM) devices,
        providing device type information.

    - Add API for individual/specific vCPU hotplug
        The new API allows selecting specific vCPUs to be added/removed from
        the VM. The existing APIs allowed only adding/removing from the end
        which did not play well with NUMA.

  * Improvements

    - virsh: pool-list: allow both --uuid and --name in one command
        Adjust the virsh-pool command to support the --uuid and/or --name
        options in order to print just the --name and/or --uuid of pools.

    - Introduce MTU to domain <interface/> and <network>
        Allow setting MTU size for some types of domain interface and network.

    - libxl: improve support for <timer> configurations
        Add support for multiple timers. Extend the tsc timer to support the
        emulate mode. Improve conversion of timer XML to/from xl.cfg.

    - storage: modularize the storage driver
        Split up the storage driver backends into loadable modules so that
        binary distributions don't have to compromise on shipping the storage
        driver with all backends which may pull in too many dependencies.

  * Bug fixes

    - nodedev: Fabric name must not be required for fc_host capability
        fabric_name is one of many fc_host attributes in Linux that is optional
        and left to the low-level driver to decide if it is implemented. For
        example the zfcp device driver does not provide a fabric name for an
        fcp host. The requirement for the existence of a fabric name has been
        removed by making it optional.

    - bhyve: change address allocation schema for SATA disks
        Previously, the bhyve driver assigned PCI addresses to SATA disks
        directly rather than assigning that to a controller and using SATA
        addresses for disks. It was implemented this way because bhyve has no
        notion of an explicit SATA controller. However, as this doesn't match
        libvirt's understanding of disk addresses, the bhyve driver was changed
        to follow the common schema and have PCI addresses for SATA controllers
        and SATA addresses for disks. If you're having issues because of this,
        it's recommended to edit the domain's XML and remove <address
        type='pci'> from the <disk> elements with <target bus='sata'/> and let
        libvirt regenerate it properly.

    - libxl: maximum memory fixes
        Fix reporting of domain maximum memory. Fix setting dom0 maximum
        memory.

    - libxl: fix disk detach when <driver> not specified

    - libxl: fix dom0 autoballooning with Xen 4.8

    - qemu: Allow empty script path to <interface/>
        Historically, this was always allowed. Unfortunately, due to some
        rework done for 1.3.2 release a bug was dragged in which suddenly stop
        allowing domain with such configuration to start.

# v3.0.0 (2017-01-17)

  * New features

    - Domain events for metadata content changes
        The domain events framework has a new event ID that can be used to get
        notifications when domain metadata content changes.

    - Event notifications for the secret object
        The secret object now supports event notifications, covering lifcycle
        changes and secret value changes.

    - New localPtr attribute for "ip" element in network XML

    - qemu: Support QEMU group I/O throttling
        Add the capability to allow group I/O throttling via a new domain
        <disk> <iotune> subelement "group_name" to allow sharing I/O throttling
        quota between multiple drives.

    - nss: Introduce libvirt_guest
        New libvirt_guest nss module that translates libvirt guest names into
        IP addresses.

    - daemon: Add support for runtime logging settings adjustment
        Logging-related settings like log outputs and filters can now be
        adjusted during runtime using the admin interface without the necessity
        of the daemon's restart.

    - storage: Add virStorageVolInfoFlags API
        Add the API to support using the VIR_STORAGE_VOL_GET_PHYSICAL flag in
        order to return the host physical size in bytes of the image container
        in the allocation field of the _virStorageVolInfo structure. The
        --physical flag has been added to the virsh vol-info command to access
        the data.

    - libxl: Implement virDomainGetMaxVcpus API

    - storage: Add overwrite flag checking for logical pool
        Add support for the OVERWRITE flags for the logical storage backend
        including checking for existing data on the target volumes when
        building a new logical pool on target volume(s).

    - qemu: Add support for guest CPU configuration on s390(x)

  * Improvements

    - perf: Add more perf statistics
        Add support to get the count of branch instructions executed, branch
        misses, bus cycles, stalled frontend cpu cycles, stalled backend cpu
        cycles, and ref cpu cycles by applications running on the platform.

    - conf: Display <physical> for volume xml
        Add a display of the <physical> size of a disk volume in the output of
        the volume XML.

    - qemu: Use virtio-pci by default for aarch64 mach-virt guests
        virtio-pci provides several advantages over virtio-mmio, such as the
        ability to hotplug devices and improved performance. While opting in to
        virtio-pci has been possible for a while, newly-defined guests will now
        use it automatically.

    - vbox: remove support for VirtualBox 3.x and older
        Those old VirtualBox versions have been unsupported by upstream for a
        long time and the API of 4.0 and newer has diverged enough to require
        code abstractions to handle differences. Removing support for those old
        versions drops lots of code from the driver and simplifies the logic to
        ease implementation of new features going forward.

    - virsh: pool-info: introduce option --bytes
        Add option --bytes to virsh pool-info in order ti allow display of
        units in bytes rather than default of human readable output.

    - scsi: Add parent wwnn/wwpn or fabric capability for createVport
        Improve the algorithm searching for the parent scsi_host device for
        vHBA/NPIV scsi_host creation. Rather than supplying the "parent" by
        name, it's now possible to define the parent by it's wwnn/wwpn or
        fabric_wwn in the node device create XML or the storage pool XML.

    - qemu: aggregate pcie-root-ports onto multiple functions of a slot
        When pcie-root-ports are added to pcie-root in order to provide a place
        to connect PCI Express endpoint devices, libvirt now aggregates
        multiple root ports together onto the same slot (up to 8 per slot) in
        order to conserve slots. Using this method, it's possible to connect
        more than 200 endpoint devices to a guest that uses PCIe without
        requiring setup of any PCIe switches.

  * Bug fixes

    - lxc: fix accidental killing of containers during libvirtd restart
        The libvirt_lxc process was previously not moved into the container
        scope. As a result, if systemd reloads its config after a container is
        started, when libvirtd is later restarted it will accidentally kill the
        containers.

    - qemu: Correct GetBlockInfo values
        For an active domain, correct the physical value provided for a raw
        sparse file backed storage and the allocation value provided for a
        qcow2 file backed storage that hasn't yet been opened on the domain.

    - qemu: Make virtio console usable on ppc64 guests
        The chardev detection code has been improved and can now handle this
        configuration properly.

    - qemu: Enable mount namespace
        To avoid funny races with udev relabelling devices under our hands and
        to enhance security, libvirt now spawns each qemu process with its own
        /dev.

    - storage: Fix implementation of no-overwrite for file system backend
        Fix file system storage backend implementation of the OVERWRITE flags
        to be consistent between code and documentation. Add checks to ensure
        that when building a new file system on a target volume that there is
        not something already on the disk in a format that libvirt can
        recognize.

    - qemu: Create hugepage path on per domain basis
        Historically, all hugepage enabled domains shared the same path under
        hugetlbfs. This left libvirt unable to correctly set security labels on
        it. With this release, however, each domain is put into a separate path
        which is also correctly labeled.

    - conf: Reject domains with duplicate drive addresses
        Reject duplicate drive addresses for disks and hostdevs at domain
        definition.

    - libxl: reverse defaults on HVM net device attach
        Fixes network interface attach for HVM domains when no model is
        specified. Emulated hotplug isn't yet supported and hence we should
        default to the general working scenario.

    - libxl: always enable pae for x86_64 HVM
        By default pae is disabled in libxl. Without an explicit <pae/> setting
        in the domain <features> configuration, an x86_64 HVM domain would be
        get an i686 environment. pae should always be enabled for x86_64 HVM
        domains.

    - qemu: Fix XML dump of autogenerated websocket
        As a result autogenerated websocket port is regenerated on domain
        restore, migration and such as it should be.

# v2.5.0 (2016-12-04)

  * New features

    - shmem: Add support for additional models
        The shmem device can now utilize QEMU's ivshmem-plain and
        ivshmem-doorbell, more modern versions of ivshmem.

    - vbox: Add VirtualBox 5.1 support

    - libssh: New transport
        The new libssh transport allows one to connect to a running libvirtd
        via SSH, using the libssh library; for example:
        qemu+libssh://server/system.

    - vhost-scsi: Add support scsi_host hostdev passthrough
        Add the capability to pass through a scsi_host HBA and the associated
        LUNs to the guest.

    - Allow debugging of gluster volumes in qemu
        Users can now enable debug logging for native gluster volumes in qemu
        using the "gluster_debug_level" option in qemu.conf

    - Pre-allocate memory slots for memory hotplug
        Slot numbers for memory devices are now automatically allocated and
        thus persistent. In addition slot numbers can be specified without
        providing a base address, which simplifies user configuration

    - qemu: Express devices will be placed on PCIe bus by default
        For machine types that use a PCI Express root bus (e.g. x86_64/Q35 and
        aarch64/virt), any unaddressed PCI device that is an Express device
        (all virtio-1.0 devices, e1000e, nec-xhci, vfio assigned devices) will
        be placed on an Express controller (i.e. a pcie-root-port) instead of a
        legacy PCI controller (i.e. pci-bridge) with the root ports added as
        needed.

  * Improvements

    - docs: Better documentation for migration APIs and flags

    - vbox: Address thread safety issues

    - virsh: Add support for passing an alternative persistent XML to migrate
      command

    - vhostuser: Allow hotplug of multiqueue devices

    - NEWS: Switch to an improved format
        List user-visible changes instead of single commits for a better
        high-level overview of differences between libvirt releases.

    - website: Modernize layout and branding
        The libvirt website looked very cluttered and outdated; it has now been
        completely overhauled, resulting in a design that's better organized
        and more pleasant to look at.

  * Bug fixes

    - vz: Fix migration in P2P mode

    - Forbid newline character in names of some libvirt objects

    - Fix compilation on macOS

==============================================================================
Older libvirt releases didn't have proper release notes: if you are interested
in changes between them, you should check out ChangeLog* and docs/news-*.html.
